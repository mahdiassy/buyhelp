import { isObservable, of } from 'rxjs';
export const defaults = {
    // menu
    bold: 'Bold',
    italic: 'Italic',
    code: 'Code',
    underline: 'Underline',
    strike: 'Strike',
    blockquote: 'Blockquote',
    bullet_list: 'Bullet List',
    ordered_list: 'Ordered List',
    heading: 'Heading',
    h1: 'Header 1',
    h2: 'Header 2',
    h3: 'Header 3',
    h4: 'Header 4',
    h5: 'Header 5',
    h6: 'Header 6',
    align_left: 'Left Align',
    align_center: 'Center Align',
    align_right: 'Right Align',
    align_justify: 'Justify',
    text_color: 'Text Color',
    background_color: 'Background Color',
    horizontal_rule: 'Horizontal rule',
    format_clear: 'Clear Formatting',
    insertLink: 'Insert Link',
    removeLink: 'Remove Link',
    insertImage: 'Insert Image',
    // pupups, forms, others...
    url: 'URL',
    text: 'Text',
    openInNewTab: 'Open in new tab',
    insert: 'Insert',
    altText: 'Alt Text',
    title: 'Title',
    remove: 'Remove',
};
class Locals {
    constructor(newLocals = {}) {
        this.locals = defaults;
        this.get = (key) => {
            const value = this.locals[key];
            if (value) {
                return isObservable(value) ? value : of(value);
            }
            return of('');
        };
        this.locals = { ...defaults, ...newLocals };
    }
}
export default Locals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVkaXRvci9zcmMvbGliL0xvY2Fscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsWUFBWSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQWdEO0lBQ25FLE9BQU87SUFDUCxJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLElBQUksRUFBRSxNQUFNO0lBQ1osU0FBUyxFQUFFLFdBQVc7SUFDdEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsWUFBWSxFQUFFLGNBQWM7SUFDNUIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsVUFBVTtJQUNkLEVBQUUsRUFBRSxVQUFVO0lBQ2QsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsVUFBVTtJQUNkLEVBQUUsRUFBRSxVQUFVO0lBQ2QsVUFBVSxFQUFFLFlBQVk7SUFDeEIsWUFBWSxFQUFFLGNBQWM7SUFDNUIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsYUFBYSxFQUFFLFNBQVM7SUFDeEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsZ0JBQWdCLEVBQUUsa0JBQWtCO0lBQ3BDLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsWUFBWSxFQUFFLGtCQUFrQjtJQUNoQyxVQUFVLEVBQUUsYUFBYTtJQUN6QixVQUFVLEVBQUUsYUFBYTtJQUN6QixXQUFXLEVBQUUsY0FBYztJQUUzQiwyQkFBMkI7SUFDM0IsR0FBRyxFQUFFLEtBQUs7SUFDVixJQUFJLEVBQUUsTUFBTTtJQUNaLFlBQVksRUFBRSxpQkFBaUI7SUFDL0IsTUFBTSxFQUFFLFFBQVE7SUFDaEIsT0FBTyxFQUFFLFVBQVU7SUFDbkIsS0FBSyxFQUFFLE9BQU87SUFDZCxNQUFNLEVBQUUsUUFBUTtDQUNqQixDQUFDO0FBSUYsTUFBTSxNQUFNO0lBR1YsWUFBWSxZQUFzRSxFQUFFO1FBRnBGLFdBQU0sR0FBRyxRQUFRLENBQUM7UUFNbEIsUUFBRyxHQUFHLENBQUMsR0FBVyxFQUFzQixFQUFFO1lBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2hEO1lBQ0QsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsQ0FBQyxDQUFDO1FBVEEsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUM7SUFDOUMsQ0FBQztDQVNGO0FBRUQsZUFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBpc09ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0czogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+PiA9IHtcbiAgLy8gbWVudVxuICBib2xkOiAnQm9sZCcsXG4gIGl0YWxpYzogJ0l0YWxpYycsXG4gIGNvZGU6ICdDb2RlJyxcbiAgdW5kZXJsaW5lOiAnVW5kZXJsaW5lJyxcbiAgc3RyaWtlOiAnU3RyaWtlJyxcbiAgYmxvY2txdW90ZTogJ0Jsb2NrcXVvdGUnLFxuICBidWxsZXRfbGlzdDogJ0J1bGxldCBMaXN0JyxcbiAgb3JkZXJlZF9saXN0OiAnT3JkZXJlZCBMaXN0JyxcbiAgaGVhZGluZzogJ0hlYWRpbmcnLFxuICBoMTogJ0hlYWRlciAxJyxcbiAgaDI6ICdIZWFkZXIgMicsXG4gIGgzOiAnSGVhZGVyIDMnLFxuICBoNDogJ0hlYWRlciA0JyxcbiAgaDU6ICdIZWFkZXIgNScsXG4gIGg2OiAnSGVhZGVyIDYnLFxuICBhbGlnbl9sZWZ0OiAnTGVmdCBBbGlnbicsXG4gIGFsaWduX2NlbnRlcjogJ0NlbnRlciBBbGlnbicsXG4gIGFsaWduX3JpZ2h0OiAnUmlnaHQgQWxpZ24nLFxuICBhbGlnbl9qdXN0aWZ5OiAnSnVzdGlmeScsXG4gIHRleHRfY29sb3I6ICdUZXh0IENvbG9yJyxcbiAgYmFja2dyb3VuZF9jb2xvcjogJ0JhY2tncm91bmQgQ29sb3InLFxuICBob3Jpem9udGFsX3J1bGU6ICdIb3Jpem9udGFsIHJ1bGUnLFxuICBmb3JtYXRfY2xlYXI6ICdDbGVhciBGb3JtYXR0aW5nJyxcbiAgaW5zZXJ0TGluazogJ0luc2VydCBMaW5rJyxcbiAgcmVtb3ZlTGluazogJ1JlbW92ZSBMaW5rJyxcbiAgaW5zZXJ0SW1hZ2U6ICdJbnNlcnQgSW1hZ2UnLFxuXG4gIC8vIHB1cHVwcywgZm9ybXMsIG90aGVycy4uLlxuICB1cmw6ICdVUkwnLFxuICB0ZXh0OiAnVGV4dCcsXG4gIG9wZW5Jbk5ld1RhYjogJ09wZW4gaW4gbmV3IHRhYicsXG4gIGluc2VydDogJ0luc2VydCcsXG4gIGFsdFRleHQ6ICdBbHQgVGV4dCcsXG4gIHRpdGxlOiAnVGl0bGUnLFxuICByZW1vdmU6ICdSZW1vdmUnLFxufTtcblxuZXhwb3J0IHR5cGUgTG9jYWxzS2V5cyA9IGtleW9mIHR5cGVvZiBkZWZhdWx0cztcblxuY2xhc3MgTG9jYWxzIHtcbiAgbG9jYWxzID0gZGVmYXVsdHM7XG5cbiAgY29uc3RydWN0b3IobmV3TG9jYWxzOiBQYXJ0aWFsPFJlY29yZDxMb2NhbHNLZXlzLCBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz4+PiA9IHt9KSB7XG4gICAgdGhpcy5sb2NhbHMgPSB7IC4uLmRlZmF1bHRzLCAuLi5uZXdMb2NhbHMgfTtcbiAgfVxuXG4gIGdldCA9IChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmxvY2Fsc1trZXldO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JzZXJ2YWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IG9mKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG9mKCcnKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9jYWxzO1xuIl19