{
  "version": 3,
  "sources": ["src/app/shared/services/order.service.ts", "src/app/shared/state/order.state.ts", "src/app/shared/action/order-status.action.ts", "src/app/shared/services/order-status.service.ts", "src/app/shared/state/order-status.state.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { CheckoutPayload, Order, OrderModel, OrderCheckout, PlaceOrder, RePaymentPayload } from '../interface/order.interface';\nimport { Params } from '../interface/core.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n\n  public skeletonLoader: boolean = false;\n\n  constructor(private http: HttpClient) {}\n\n  getOrders(payload?: Params): Observable<OrderModel> {\n    return this.http.get<OrderModel>(`${environment.URL}/order`, { params: payload });\n  }\n\n  viewOrder(id: number): Observable<Order> {\n    return this.http.get<Order>(`${environment.URL}/order/${id}`);\n  }\n\n  checkout(payload: CheckoutPayload): Observable<OrderCheckout> {\n    return this.http.post<OrderCheckout>(`${environment.URL}/checkout`, payload);\n  }\n\n  placeOrder(payload: CheckoutPayload): Observable<PlaceOrder> {\n    return this.http.post<PlaceOrder>(`${environment.URL}/order`, payload);\n  }\n\n  rePayment(payload: RePaymentPayload): Observable<PlaceOrder> {\n    return this.http.post<PlaceOrder>(`${environment.URL}/rePayment`, payload);\n  }\n\n  orderTracking(payload: { order_number: string, email_or_phone: string }): Observable<Order> {\n    return this.http.get<Order>(`${environment.URL}/trackOrder`, { params: payload });\n  }\n\n  downloadInvoice(payload?: Params): Observable<Blob> {\n    const requestBody = {}; // You can provide any necessary request body here\n    return this.http.post<Blob>(`${environment.URL}/order/invoice`, payload , {\n      responseType: 'blob' as 'json'\n    });\n  }\n\n}\n", "import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\nimport { tap } from \"rxjs\";\nimport { GetOrders, ViewOrder, Checkout, PlaceOrder, RePayment, OrderTracking, DownloadInvoice } from \"../action/order.action\";\nimport { Order, OrderCheckout } from \"../interface/order.interface\";\nimport { OrderService } from \"../services/order.service\";\nimport { ClearCart } from \"../action/cart.action\";\nimport { NotificationService } from \"../services/notification.service\";\n\nexport class OrderStateModel {\n  order = {\n    data: [] as Order[],\n    total: 0\n  }\n  selectedOrder: Order | null\n  checkout: OrderCheckout | null\n}\n\n@State<OrderStateModel>({\n  name: \"order\",\n  defaults: {\n    order: {\n      data: [],\n      total: 0\n    },\n    selectedOrder: null,\n    checkout: null\n  },\n})\n@Injectable()\nexport class OrderState {\n\n  constructor(private notificationService: NotificationService,\n    private router: Router,\n    private orderService: OrderService) {}\n\n  @Selector()\n  static order(state: OrderStateModel) {\n    return state.order;\n  }\n\n  @Selector()\n  static selectedOrder(state: OrderStateModel) {\n    return state.selectedOrder;\n  }\n\n  @Selector()\n  static checkout(state: OrderStateModel) {\n    return state.checkout;\n  }\n\n  @Action(GetOrders)\n  getOrders(ctx: StateContext<OrderStateModel>, action: GetOrders) {\n    return this.orderService.getOrders(action?.payload).pipe(\n      tap({\n        next: result => {\n          ctx.patchState({\n            order: {\n              data: result.data,\n              total: result?.total ? result?.total : result.data?.length\n            }\n          });\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n  @Action(ViewOrder)\n  viewOrder(ctx: StateContext<OrderStateModel>, { id }: ViewOrder) {\n    this.orderService.skeletonLoader = true;\n    return this.orderService.viewOrder(id).pipe(\n      tap({\n        next: result => {\n          const state = ctx.getState();\n          ctx.patchState({\n            ...state,\n            selectedOrder: result\n          });\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        },\n        complete: () => {\n          this.orderService.skeletonLoader = false;\n        }\n      })\n    );\n  }\n\n  @Action(Checkout)\n  checkout(ctx: StateContext<OrderStateModel>, action: Checkout) {\n    return this.orderService.checkout(action?.payload).pipe(\n      tap({\n        next: result => {\n          const state = ctx.getState();\n          ctx.patchState({\n            ...state,\n            checkout: result\n          });\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n  @Action(PlaceOrder)\n  placeOrder(ctx: StateContext<OrderStateModel>, action: PlaceOrder) {\n    return this.orderService.placeOrder(action?.payload).pipe(\n      tap({\n        next: result => {\n          if((action.payload.payment_method == 'cod' || action.payload.payment_method == 'bank_transfer') && !result.is_guest) {\n            this.router.navigateByUrl(`/account/order/details/${result.order_number}`);\n          } else if((action.payload.payment_method == 'cod' || action.payload.payment_method == 'bank_transfer') && result.is_guest) {\n            this.router.navigate([ 'order/details' ], { queryParams: { order_number: result.order_number, email_or_phone: action?.payload.email } });\n          } else {\n            window.open(result.url, \"_self\");\n          }\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n  @Action(RePayment)\n  rePayment(ctx: StateContext<OrderStateModel>, action: RePayment) {\n    return this.orderService.rePayment(action.payload).pipe(\n      tap({\n        next: result => {\n          if((action.payload.payment_method == 'cod' || action.payload.payment_method == 'bank_transfer') && !result.is_guest) {\n            this.router.navigateByUrl(`/account/order/details/${result.order_number}`);\n          } else if((action.payload.payment_method == 'cod' || action.payload.payment_method == 'bank_transfer') && result.is_guest) {\n            this.router.navigate([ 'order/details' ], { queryParams: { order_number: result.order_number, email_or_phone: result.email } });\n          } else {\n            window.open(result.url, \"_self\");\n          }\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n  @Action(OrderTracking)\n  orderTracking(ctx: StateContext<OrderStateModel>, action: OrderTracking) {\n    this.notificationService.notification = false;\n    return this.orderService.orderTracking(action.payload).pipe(\n      tap({\n        next: result => {\n          const state = ctx.getState();\n          ctx.patchState({\n            ...state,\n            selectedOrder: result\n          });\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n\n  @Action(DownloadInvoice)\n  downloadInvoice(ctx: StateContext<OrderStateModel>, action: DownloadInvoice) {\n    return this.orderService.downloadInvoice(action.payload).pipe(\n      tap({\n        next: result => {\n          const blob = new Blob([result], { type: 'pdf' });\n          const url = window.URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = `invoice-${action.payload['order_number']}.pdf`;\n          link.click();\n          window.URL.revokeObjectURL(url);\n        },\n        error: err => { \n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n}\n", "import { Params } from \"../interface/core.interface\";\n\nexport class GetOrderStatus {\n   static readonly type = \"[Order Status] Get\";\n   constructor(public payload?: Params) {}\n}\n", "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { OrderStatusModel } from '../interface/order-status.interface';\nimport { Params } from '../interface/core.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderStatusService {\n\n  constructor(private http: HttpClient) {}\n\n  getOrderStatus(payload?: Params): Observable<OrderStatusModel> {\n    return this.http.get<OrderStatusModel>(`${environment.URL}/orderStatus`, { params: payload });\n  }\n  \n}\n", "import { Injectable } from \"@angular/core\";\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\nimport { tap } from \"rxjs\";\nimport { GetOrderStatus } from \"../action/order-status.action\";\nimport { OrderStatus } from \"../interface/order-status.interface\";\nimport { OrderStatusService } from \"../services/order-status.service\";\n\nexport class OrderStatusStateModel {\n   orderStatus = {\n    data: [] as OrderStatus[],\n    total: 0\n  }\n  selectedOrderStatus: OrderStatus | null;\n}\n\n@State<OrderStatusStateModel>({\n  name: \"orderStatus\",\n  defaults: {\n   orderStatus: {\n      data: [],\n      total: 0\n    },\n    selectedOrderStatus: null\n  },\n})\n@Injectable()\nexport class OrderStatusState {\n  \n  constructor(private orderStatusService: OrderStatusService) {}\n\n   @Selector()\n   static orderStatus(state: OrderStatusStateModel) {\n      return state.orderStatus;\n   }\n\n   @Selector()\n   static orderStatuses(state: OrderStatusStateModel) {\n      return state.orderStatus.data.map(res => { \n         return { label: res?.name, value: res?.id }\n       });\n   }\n\n   @Selector()\n   static selectedOrderStatus(state: OrderStatusStateModel) {\n      return state.selectedOrderStatus;\n   }\n\n   @Action(GetOrderStatus)\n   getOrderStatus(ctx: StateContext<OrderStatusStateModel>, action: GetOrderStatus) {\n     return this.orderStatusService.getOrderStatus(action.payload).pipe(\n       tap({\n         next: result => { \n            ctx.patchState({\n              orderStatus: {\n                data: result.data,\n                total: result?.total ? result?.total : result.data?.length\n              }\n            });\n         },\n         error: err => { \n           throw new Error(err?.error?.message);\n         }\n       })\n     );\n   }\n \n}    "],
  "mappings": "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",
  "names": ["_a"]
}
