{
  "version": 3,
  "sources": ["src/app/shared/action/tag.action.ts", "src/app/shared/services/tag.service.ts", "src/app/shared/state/tag.state.ts"],
  "sourcesContent": ["import { Params } from \"../interface/core.interface\";\n\nexport class GetTags {\n  static readonly type = \"[Tag] Get\";\n  constructor(public payload?: Params) {}\n}", "import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { environment } from \"../../../environments/environment\";\nimport { Params } from \"../interface/core.interface\";\nimport { TagModel } from \"../interface/tag.interface\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TagService {\n\n  constructor(private http: HttpClient) {}\n\n  getTags(payload?: Params): Observable<TagModel> {\n    return this.http.get<TagModel>(`${environment.URL}/tag`, { params: payload });\n  }\n  \n}", "import { Injectable } from \"@angular/core\";\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\nimport { tap } from \"rxjs\";\nimport { GetTags } from \"../action/tag.action\";\nimport { Tag } from \"../interface/tag.interface\";\nimport { TagService } from \"../services/tag.service\";\n\nexport class TagStateModel {\n  tag = {\n    data: [] as Tag[],\n    total: 0\n  }\n}\n\n@State<TagStateModel>({\n  name: \"tag\",\n  defaults: {\n    tag: {\n      data: [],\n      total: 0\n    }\n  },\n})\n@Injectable()\nexport class TagState {\n  \n  constructor(private tagService: TagService) {}\n\n  @Selector()\n  static tag(state: TagStateModel) {\n    return state.tag;\n  }\n\n  @Action(GetTags)\n  getTags(ctx: StateContext<TagStateModel>, action: GetTags) {\n    return this.tagService.getTags(action.payload).pipe(\n      tap({\n        next: result => { \n          ctx.patchState({\n            tag: {\n              data: result.data,\n              total: result?.total ? result?.total : result.data?.length\n            }\n          });\n        },\n        error: err => { \n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n}"],
  "mappings": ";;;;;;;;;;;;;AAEM,IAAO,WAAP,MAAO,SAAO;EAElB,YAAmB,SAAgB;AAAhB,SAAA,UAAA;EAAmB;;AADtB,SAAA,OAAO;AADnB,IAAO,UAAP;;;ACQA,IAAO,cAAP,MAAO,YAAU;EAErB,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;EAEvC,QAAQ,SAAgB;AACtB,WAAO,KAAK,KAAK,IAAc,GAAG,YAAY,GAAG,QAAQ,EAAE,QAAQ,QAAO,CAAE;EAC9E;;;mBANW,aAAU,mBAAA,UAAA,CAAA;AAAA;+EAAV,aAAU,SAAV,YAAU,WAAA,YAFT,OAAM,CAAA;AAEd,IAAO,aAAP;;;;ACcC,IAAM,YAAN,WAAc;EAEnB,YAAoB,YAAsB;AAAtB,SAAA,aAAA;EAAyB;EAG7C,OAAO,IAAI,OAAoB;AAC7B,WAAO,MAAM;EACf;EAGA,QAAQ,KAAkC,QAAe;AACvD,WAAO,KAAK,WAAW,QAAQ,OAAO,OAAO,EAAE,KAC7C,IAAI;MACF,MAAM,YAAS;AACb,YAAI,WAAW;UACb,KAAK;YACH,MAAM,OAAO;YACb,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,MAAM;;SAEvD;MACH;MACA,OAAO,SAAM;AACX,cAAM,IAAI,MAAM,KAAK,OAAO,OAAO;MACrC;KACD,CAAC;EAEN;;mBA1BW,IAAQ,mBAAA,UAAA,CAAA;AAAA,yEAAR,IAAQ,SAAR,GAAQ,UAAA,CAAA,GAAd;AAUL,WAAA;EADC,OAAO,OAAO;;AAJR,WAAA;EADN,SAAQ;;AAJE,WAAQ,WAAA;EAVpB,MAAqB;IACpB,MAAM;IACN,UAAU;MACR,KAAK;QACH,MAAM,CAAA;QACN,OAAO;;;GAGZ;GAEY,QAAQ;",
  "names": []
}
