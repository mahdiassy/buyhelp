{
  "version": 3,
  "sources": ["src/app/shared/action/page.action.ts", "src/app/shared/services/page.service.ts", "src/app/shared/state/page.state.ts"],
  "sourcesContent": ["import { Params } from \"../interface/core.interface\";\nimport { ContactUsModel } from \"../interface/page.interface\";\n\nexport class GetPages {\n  static readonly type = \"[Page] Get\";\n  constructor(public payload?: Params) {}\n}\n\nexport class GetPageBySlug {\n  static readonly type = \"[Page] By Slug\";\n  constructor(public slug: string) {}\n}\n\nexport class GetFaqs {\n  static readonly type = \"[Faq] Get\";\n}\n\nexport class ContactUs {\n  static readonly type = \"[ContactUs] Post\";\n  constructor(public payload: ContactUsModel) {}\n}\n", "import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { environment } from \"../../../environments/environment\";\nimport { Params } from \"../interface/core.interface\";\nimport { ContactUsModel, FaqModel, Page, PageModel } from \"../interface/page.interface\";\nimport { StoresModel } from \"../interface/store.interface\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PageService {\n\n  public skeletonLoader: boolean = false;\n  \n  constructor(private http: HttpClient) {}\n\n  getPages(payload?: Params): Observable<PageModel> {\n    // Remove status parameter if it exists to avoid database errors\n    const safePayload = { ...payload };\n    if (safePayload && 'status' in safePayload) {\n      delete safePayload['status'];\n    }\n    return this.http.get<PageModel>(`${environment.URL}/page`, { params: safePayload });\n  }\n\n  getPageBySlug(slug: string): Observable<Page> {\n    return this.http.get<Page>(`${environment.URL}/page/slug/${slug}`);\n  }\n\n  getFaqs(): Observable<FaqModel> {\n    return this.http.get<FaqModel>(`${environment.URL}/faq`);\n  }\n\n  contactUs(payload: ContactUsModel) {\n    return this.http.post(`${environment.URL}/contact-us`, payload);\n  }\n\n  getStores(payload?: Params): Observable<StoresModel> {\n    return this.http.get<StoresModel>(`${environment.URL}/store`, { params: payload });\n  }\n  \n}\n", "import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { tap } from \"rxjs\";\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\nimport { PageService } from \"../services/page.service\";\nimport { GetPages, GetPageBySlug, ContactUs, GetFaqs } from \"../action/page.action\";\nimport { ContactUsModel, Faq, Page } from \"../interface/page.interface\";\n\nexport class PageStateModel {\n  page = {\n    data: [] as Page[],\n    total: 0\n  }\n  faq = {\n    data: [] as Faq[],\n    total: 0\n  }\n  selectedPage: Page | null;\n}\n\n@State<PageStateModel>({\n  name: \"page\",\n  defaults: {\n    page: {\n      data: [],\n      total: 0\n    },\n    faq: {\n      data: [],\n      total: 0\n    },\n    selectedPage: null,\n  },\n})\n@Injectable()\nexport class PageState {\n\n  constructor(private router: Router,\n    private pageService: PageService ) {}\n\n  @Selector()\n  static page(state: PageStateModel) {\n    return state.page;\n  }\n\n  @Selector()\n  static faq(state: PageStateModel) {\n    return state.faq;\n  }\n\n  @Selector()\n  static selectedPage(state: PageStateModel) {\n    return state.selectedPage;\n  }\n\n  @Action(GetPages)\n  getPages(ctx: StateContext<PageStateModel>, action: GetPages) {\n    return this.pageService.getPages(action.payload).pipe(\n      tap({\n        next: result => {\n          ctx.patchState({\n            page: {\n              data: result.data,\n              total: result?.total ? result?.total : result.data?.length\n            }\n          });\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n  @Action(GetPageBySlug)\n  getPageBySlug(ctx: StateContext<PageStateModel>, { slug }: GetPageBySlug) {\n    this.pageService.skeletonLoader = true;\n    return this.pageService.getPageBySlug(slug).pipe(\n      tap({\n        next: result => {\n          const state = ctx.getState();\n          ctx.patchState({\n            ...state,\n            selectedPage: result\n          });\n        },\n        complete: () => {\n          this.pageService.skeletonLoader = false;\n        },\n        error: err => {\n            \n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n  @Action(GetFaqs)\n  getFaqs(ctx: StateContext<PageStateModel>) {\n    this.pageService.skeletonLoader = true;\n    return this.pageService.getFaqs().pipe(\n      tap({\n        next: result => {\n          ctx.patchState({\n            faq: {\n              data: result.data,\n              total: result?.total ? result?.total : result.data?.length\n            }\n          });\n        },\n        complete: () => {\n          this.pageService.skeletonLoader = false;\n        },\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n  @Action(ContactUs)\n  contactUs(ctx: StateContext<ContactUsModel>, { payload }: ContactUs) {\n    return this.pageService.contactUs(payload).pipe(\n      tap({\n        error: err => {\n          throw new Error(err?.error?.message);\n        }\n      })\n    );\n  }\n\n}\n"],
  "mappings": "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",
  "names": []
}
